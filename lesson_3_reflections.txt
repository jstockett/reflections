What happens when you initialize a repository? Why do you need to do it?

	When the comman git init is run it creates the .git file in the working directory.  The 
	.git file stores the meta data of the repository.  Git init does not perform a commit.  
	Running git status will show the current commit(this will show 'Initial commit' on a 
	newly created repository) and the tracked/untracked files.

How is the staging area different from the working directory and the repository? What value do you think it offers?
	
	The staging area shows which files you want to track.  By having a staging area git lets you choose which files to track and when to start tracking them.

How can you use the staging area to make sure you have one commit per logical change?

	By using the command git diff without any arguments you can see the changes between the working directory and the staging area.  You can also use git diff --staged to see the differences between the staging area and the most recent commit.  This two tools allow you 
	to check exactly what changes would be made prior to committing.

What are some situations when branches would be helpful in keeping your history organized? How would branches help?

	Branching allows users to experiment and make changes to a project while keeping an original copy unchanged.  The branch simplifies keeping track of what is what by allowing
	for branch titles that humans can understand rather than hashcode id that git assigns commits.

What is the result of merging two branches together? Why do we represent it in the diagram the way we do?
	
	Merging two branches combines the code and combines the commit history, preserving the commit relationships(i.e. keeping all the commits reachable).

	This diagrams are represented the way they are to show the parent child relationship between commits.
